/*
 * Copyright (C) 2015 Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package it.cnr.istc.iloc.api;

import java.util.EventListener;
import java.util.List;

/**
 * Interface to support notification when changes occur to a ISolver. These
 * include changes to the current state node, movements to other nodes, branches
 * and detection of inconsistencies, solutions and optimal solutions.
 *
 * @author Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>
 */
public interface ISolverListener extends EventListener {

    /**
     * Called when the content of the node {@code n} has changed. The content of
     * a node might change for several reasons as, for example, the addition of
     * flaws, the addition of resolvers as well as the propagation of
     * constraints.
     *
     * @param model the model for evaluating the current node.
     * @param n the node whose content has changed. Usually {@code n} is the
     * current node of the search space.
     */
    public void contentChanged(IModel model, INode n);

    /**
     * Called after the solver moves to node {@code n}. Node {@code n} becomes
     * the current node of the search space.
     *
     * @param n the current node of the search space.
     */
    public void currentNode(INode n);

    /**
     * Called when an unsolvable inconsistency is detected on the node
     * {@code n}. A node might become inconsistent, mostly, for an inconsistent
     * constraint network.
     *
     * @param n the node that has become inconsistent. Usually {@code n} is the
     * current node of the search space.
     */
    public void inconsistentNode(INode n);

    /**
     * Called when a solution is found. A node {@code n} is a solution when it
     * has no flaws and the constraint network is consistent.
     *
     * @param model the model for evaluating the solution node.
     * @param n the node that has been recognized as a solution.
     */
    public void solutionNode(IModel model, INode n);

    /**
     * Called when the best solution is found. A node {@code n} is a solution
     * when it has no flaws and the constraint network is consistent. A node
     * represents the best solution respect to some defined objective functions.
     *
     * @param model the model for evaluating the best node.
     * @param n the node that has been recognized as a best solution.
     */
    public void bestNode(IModel model, INode n);

    /**
     * Called when a branch is performed on the search space. A branch in the
     * search space is typically performed for the resolution of some flaw.
     *
     * @param n the node generating the branch. Usually {@code n} is the current
     * node of the search space.
     * @param childs the childs generated by the branch.
     */
    public void branch(INode n, List<INode> childs);
}
