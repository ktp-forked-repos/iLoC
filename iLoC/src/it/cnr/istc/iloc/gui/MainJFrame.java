/*
 * Copyright (C) 2015 Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package it.cnr.istc.iloc.gui;

import it.cnr.istc.iloc.api.IModel;
import it.cnr.istc.iloc.api.INode;
import it.cnr.istc.iloc.api.ISolver;
import it.cnr.istc.iloc.api.ISolverListener;
import java.awt.Frame;
import java.beans.Beans;
import java.util.Arrays;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>
 */
public class MainJFrame extends JFrame implements ISolverListener, SolverManagerListener {

    private ISolver solver;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        setIconImages(Arrays.asList(
                new ImageIcon(getClass().getResource("resources/iLoC16.png")).getImage(),
                new ImageIcon(getClass().getResource("resources/iLoC32.png")).getImage())
        );

        mainJDesktopPane.add(staticCausalGraphJInternalFrame);
        mainJDesktopPane.add(dynamicCausalGraphJInternalFrame);
        mainJDesktopPane.add(resolutionTreeJInternalFrame);
        mainJDesktopPane.add(scopeJInternalFrame);
        mainJDesktopPane.add(timelinesJInternalFrame);
        mainJDesktopPane.add(statisticsJInternalFrame);

        setExtendedState(Frame.MAXIMIZED_BOTH);

        SwingUtilities.invokeLater(() -> {
            tileAction.actionPerformed(null);
        });

        if (!Beans.isDesignTime()) {
            SolverManager.getInstance().addSolverManagerListener(this);
        }
    }

    public JStatusBar getStatusBar() {
        return mainJStatusBar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openAction = new it.cnr.istc.iloc.gui.actions.OpenAction();
        solveAction = new it.cnr.istc.iloc.gui.actions.SolveAction();
        tileAction = new it.cnr.istc.iloc.gui.actions.TileAction();
        staticCausalGraphJInternalFrame = new it.cnr.istc.iloc.gui.staticcausalgraph.StaticCausalGraphJInternalFrame();
        dynamicCausalGraphJInternalFrame = new it.cnr.istc.iloc.gui.dynamiccausalgraph.DynamicCausalGraphJInternalFrame();
        resolutionTreeJInternalFrame = new it.cnr.istc.iloc.gui.resolutiontree.ResolutionTreeJInternalFrame();
        scopeJInternalFrame = new it.cnr.istc.iloc.gui.scope.ScopeJInternalFrame();
        timelinesJInternalFrame = new it.cnr.istc.iloc.gui.timelines.TimelinesJInternalFrame();
        statisticsJInternalFrame = new it.cnr.istc.iloc.gui.statistics.StatisticsJInternalFrame();
        mainJToolBar = new javax.swing.JToolBar();
        openJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        solveJButton = new javax.swing.JButton();
        mainJDesktopPane = new javax.swing.JDesktopPane();
        mainJStatusBar = new it.cnr.istc.iloc.gui.JStatusBar();
        mainJMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        openAction.setFrame(this);

        solveAction.setFrame(this);

        tileAction.setDesktopPane(mainJDesktopPane);

        staticCausalGraphJInternalFrame.setVisible(true);

        dynamicCausalGraphJInternalFrame.setVisible(true);

        resolutionTreeJInternalFrame.setVisible(true);

        scopeJInternalFrame.setVisible(true);

        timelinesJInternalFrame.setVisible(true);

        statisticsJInternalFrame.setVisible(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iLoC 2.0");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        mainJToolBar.setFloatable(false);
        mainJToolBar.setRollover(true);

        openJButton.setAction(openAction);
        openJButton.setFocusable(false);
        openJButton.setHideActionText(true);
        openJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mainJToolBar.add(openJButton);
        mainJToolBar.add(jSeparator1);

        solveJButton.setAction(solveAction);
        solveJButton.setFocusable(false);
        solveJButton.setHideActionText(true);
        solveJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        solveJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mainJToolBar.add(solveJButton);

        javax.swing.GroupLayout mainJDesktopPaneLayout = new javax.swing.GroupLayout(mainJDesktopPane);
        mainJDesktopPane.setLayout(mainJDesktopPaneLayout);
        mainJDesktopPaneLayout.setHorizontalGroup(
            mainJDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mainJDesktopPaneLayout.setVerticalGroup(
            mainJDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );

        mainJStatusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jMenu1.setText("File");
        mainJMenuBar.add(jMenu1);

        jMenu2.setText("Edit");
        mainJMenuBar.add(jMenu2);

        setJMenuBar(mainJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainJToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainJDesktopPane)
            .addComponent(mainJStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainJToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainJDesktopPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainJStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        SwingUtilities.invokeLater(() -> {
            tileAction.actionPerformed(null);
        });
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private it.cnr.istc.iloc.gui.dynamiccausalgraph.DynamicCausalGraphJInternalFrame dynamicCausalGraphJInternalFrame;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JDesktopPane mainJDesktopPane;
    private javax.swing.JMenuBar mainJMenuBar;
    private it.cnr.istc.iloc.gui.JStatusBar mainJStatusBar;
    private javax.swing.JToolBar mainJToolBar;
    private it.cnr.istc.iloc.gui.actions.OpenAction openAction;
    private javax.swing.JButton openJButton;
    private it.cnr.istc.iloc.gui.resolutiontree.ResolutionTreeJInternalFrame resolutionTreeJInternalFrame;
    private it.cnr.istc.iloc.gui.scope.ScopeJInternalFrame scopeJInternalFrame;
    private it.cnr.istc.iloc.gui.actions.SolveAction solveAction;
    private javax.swing.JButton solveJButton;
    private it.cnr.istc.iloc.gui.staticcausalgraph.StaticCausalGraphJInternalFrame staticCausalGraphJInternalFrame;
    private it.cnr.istc.iloc.gui.statistics.StatisticsJInternalFrame statisticsJInternalFrame;
    private it.cnr.istc.iloc.gui.actions.TileAction tileAction;
    private it.cnr.istc.iloc.gui.timelines.TimelinesJInternalFrame timelinesJInternalFrame;
    // End of variables declaration//GEN-END:variables

    @Override
    public void contentChanged(IModel model, INode n) {
//        scopeJInternalFrame.setModel(model);
//        timelinesJInternalFrame.setModel(model);
    }

    @Override
    public void currentNode(INode n) {
        scopeJInternalFrame.setModel(null);
        timelinesJInternalFrame.setModel(null);
    }

    @Override
    public void inconsistentNode(INode n) {
        scopeJInternalFrame.setModel(null);
        timelinesJInternalFrame.setModel(null);
    }

    @Override
    public void solutionNode(IModel model, INode n) {
        scopeJInternalFrame.setModel(model);
        timelinesJInternalFrame.setModel(model);
    }

    @Override
    public void bestNode(IModel model, INode n) {
        scopeJInternalFrame.setModel(model);
        timelinesJInternalFrame.setModel(model);
    }

    @Override
    public void branch(INode n, List<INode> childs) {
    }

    @Override
    public void solverChanged(ISolver solver) {
        if (this.solver != null) {
            this.solver.removeSolverListener(this);
        }
        this.solver = solver;
        this.solver.addSolverListener(this);
        scopeJInternalFrame.setModel(null);
        timelinesJInternalFrame.setModel(null);
    }
}
