package it.cnr.istc.iloc.gui.resolutiontree;

import it.cnr.istc.iloc.api.ISolver;
import it.cnr.istc.iloc.gui.SolverManager;
import it.cnr.istc.iloc.gui.SolverManagerListener;
import java.beans.Beans;
import javax.swing.JInternalFrame;

/**
 *
 * @author Riccardo De Benedictis
 */
public class ResolutionTreeJInternalFrame extends JInternalFrame implements SolverManagerListener {

    private ISolver solver;

    /**
     * Creates new form ResolutionTreeJInternalFrame
     */
    public ResolutionTreeJInternalFrame() {
        initComponents();
        if (!Beans.isDesignTime()) {
            SolverManager.getInstance().addSolverManagerListener(this);
            resolutionTreeView.init();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        costFunctionButtonGroup = new javax.swing.ButtonGroup();
        resolutionTreeView = new it.cnr.istc.iloc.gui.resolutiontree.ResolutionTreeView();
        mainJMenuBar = new javax.swing.JMenuBar();
        viewJMenu = new javax.swing.JMenu();
        costFunctionJMenu = new javax.swing.JMenu();
        defaultJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        heuristicBasedJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        flawNumberBasedJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Resolution tree");

        resolutionTreeView.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        viewJMenu.setText("View");

        costFunctionJMenu.setText("Cost function");

        costFunctionButtonGroup.add(defaultJRadioButtonMenuItem);
        defaultJRadioButtonMenuItem.setSelected(true);
        defaultJRadioButtonMenuItem.setText("Default");
        defaultJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(defaultJRadioButtonMenuItem);

        costFunctionButtonGroup.add(heuristicBasedJRadioButtonMenuItem);
        heuristicBasedJRadioButtonMenuItem.setText("Heuristic based");
        heuristicBasedJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heuristicBasedJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(heuristicBasedJRadioButtonMenuItem);

        costFunctionButtonGroup.add(flawNumberBasedJRadioButtonMenuItem);
        flawNumberBasedJRadioButtonMenuItem.setText("Flaw number based");
        flawNumberBasedJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flawNumberBasedJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(flawNumberBasedJRadioButtonMenuItem);

        viewJMenu.add(costFunctionJMenu);

        mainJMenuBar.add(viewJMenu);

        setJMenuBar(mainJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resolutionTreeView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resolutionTreeView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void defaultJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultJRadioButtonMenuItemActionPerformed
        resolutionTreeView.setCostFunction(ResolutionTreeView.CostFunction.Default);
    }//GEN-LAST:event_defaultJRadioButtonMenuItemActionPerformed

    private void heuristicBasedJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heuristicBasedJRadioButtonMenuItemActionPerformed
        resolutionTreeView.setCostFunction(ResolutionTreeView.CostFunction.HeuristicBased);
    }//GEN-LAST:event_heuristicBasedJRadioButtonMenuItemActionPerformed

    private void flawNumberBasedJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flawNumberBasedJRadioButtonMenuItemActionPerformed
        resolutionTreeView.setCostFunction(ResolutionTreeView.CostFunction.FlawNumberBased);
    }//GEN-LAST:event_flawNumberBasedJRadioButtonMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup costFunctionButtonGroup;
    private javax.swing.JMenu costFunctionJMenu;
    private javax.swing.JRadioButtonMenuItem defaultJRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem flawNumberBasedJRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem heuristicBasedJRadioButtonMenuItem;
    private javax.swing.JMenuBar mainJMenuBar;
    private it.cnr.istc.iloc.gui.resolutiontree.ResolutionTreeView resolutionTreeView;
    private javax.swing.JMenu viewJMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void solverChanged(ISolver solver) {
        if (this.solver != null) {
            this.solver.removeSolverListener(resolutionTreeView);
        }
        this.resolutionTreeView.init();
        this.solver = solver;
        this.solver.addSolverListener(resolutionTreeView);
    }
}
