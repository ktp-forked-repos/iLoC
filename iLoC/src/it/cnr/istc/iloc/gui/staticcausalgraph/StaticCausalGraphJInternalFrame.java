package it.cnr.istc.iloc.gui.staticcausalgraph;

import it.cnr.istc.iloc.api.ISolver;
import it.cnr.istc.iloc.gui.SolverManager;
import it.cnr.istc.iloc.gui.SolverManagerListener;
import java.beans.Beans;
import javax.swing.JInternalFrame;

/**
 *
 * @author Riccardo De Benedictis
 */
public class StaticCausalGraphJInternalFrame extends JInternalFrame implements SolverManagerListener {

    private ISolver solver;

    /**
     * Creates new form staticCausalGraphJInternalFrame
     */
    public StaticCausalGraphJInternalFrame() {
        initComponents();
        if (!Beans.isDesignTime()) {
            SolverManager.getInstance().addSolverManagerListener(this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        costFunctionButtonGroup = new javax.swing.ButtonGroup();
        staticCausalGraphViewer = new it.cnr.istc.iloc.gui.staticcausalgraph.StaticCausalGraphViewer();
        staticCausalGraphJMenuBar = new javax.swing.JMenuBar();
        viewJMenu = new javax.swing.JMenu();
        costFunctionJMenu = new javax.swing.JMenu();
        defaultJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        allReachableNodesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        minReachableNodesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        allWalkableEdgesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        minWalkableEdgesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Static causal graph");

        staticCausalGraphViewer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        viewJMenu.setText("View");

        costFunctionJMenu.setText("Cost function");

        costFunctionButtonGroup.add(defaultJRadioButtonMenuItem);
        defaultJRadioButtonMenuItem.setSelected(true);
        defaultJRadioButtonMenuItem.setText("Default");
        defaultJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(defaultJRadioButtonMenuItem);

        costFunctionButtonGroup.add(allReachableNodesJRadioButtonMenuItem);
        allReachableNodesJRadioButtonMenuItem.setText("All reachable");
        allReachableNodesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allReachableNodesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(allReachableNodesJRadioButtonMenuItem);

        costFunctionButtonGroup.add(minReachableNodesJRadioButtonMenuItem);
        minReachableNodesJRadioButtonMenuItem.setText("Min reachable");
        minReachableNodesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minReachableNodesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(minReachableNodesJRadioButtonMenuItem);

        costFunctionButtonGroup.add(allWalkableEdgesJRadioButtonMenuItem);
        allWalkableEdgesJRadioButtonMenuItem.setText("All walkable edges");
        allWalkableEdgesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allWalkableEdgesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(allWalkableEdgesJRadioButtonMenuItem);

        costFunctionButtonGroup.add(minWalkableEdgesJRadioButtonMenuItem);
        minWalkableEdgesJRadioButtonMenuItem.setText("Min walkable edges");
        minWalkableEdgesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minWalkableEdgesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        costFunctionJMenu.add(minWalkableEdgesJRadioButtonMenuItem);

        viewJMenu.add(costFunctionJMenu);

        staticCausalGraphJMenuBar.add(viewJMenu);

        setJMenuBar(staticCausalGraphJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(staticCausalGraphViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(staticCausalGraphViewer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void defaultJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultJRadioButtonMenuItemActionPerformed
        staticCausalGraphViewer.setCostFunction(StaticCausalGraphViewer.CostFunction.Default);
    }//GEN-LAST:event_defaultJRadioButtonMenuItemActionPerformed

    private void allReachableNodesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allReachableNodesJRadioButtonMenuItemActionPerformed
        staticCausalGraphViewer.setCostFunction(StaticCausalGraphViewer.CostFunction.AllReachableNodes);
    }//GEN-LAST:event_allReachableNodesJRadioButtonMenuItemActionPerformed

    private void minReachableNodesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minReachableNodesJRadioButtonMenuItemActionPerformed
        staticCausalGraphViewer.setCostFunction(StaticCausalGraphViewer.CostFunction.AllMinReachableNodes);
    }//GEN-LAST:event_minReachableNodesJRadioButtonMenuItemActionPerformed

    private void allWalkableEdgesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allWalkableEdgesJRadioButtonMenuItemActionPerformed
        staticCausalGraphViewer.setCostFunction(StaticCausalGraphViewer.CostFunction.MinReachableNodes);
    }//GEN-LAST:event_allWalkableEdgesJRadioButtonMenuItemActionPerformed

    private void minWalkableEdgesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minWalkableEdgesJRadioButtonMenuItemActionPerformed
        staticCausalGraphViewer.setCostFunction(StaticCausalGraphViewer.CostFunction.MinCausalDistance);
    }//GEN-LAST:event_minWalkableEdgesJRadioButtonMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem allReachableNodesJRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem allWalkableEdgesJRadioButtonMenuItem;
    private javax.swing.ButtonGroup costFunctionButtonGroup;
    private javax.swing.JMenu costFunctionJMenu;
    private javax.swing.JRadioButtonMenuItem defaultJRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem minReachableNodesJRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem minWalkableEdgesJRadioButtonMenuItem;
    private javax.swing.JMenuBar staticCausalGraphJMenuBar;
    private it.cnr.istc.iloc.gui.staticcausalgraph.StaticCausalGraphViewer staticCausalGraphViewer;
    private javax.swing.JMenu viewJMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void solverChanged(ISolver solver) {
        if (this.solver != null) {
            this.solver.getStaticCausalGraph().removeCausalGraphListener(this.staticCausalGraphViewer);
        }
        this.staticCausalGraphViewer.init();
        this.solver = solver;
        this.solver.getStaticCausalGraph().addCausalGraphListener(this.staticCausalGraphViewer);
    }
}
